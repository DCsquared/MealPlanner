package mealplanner;

import java.sql.Connection;
import javax.swing.JOptionPane;
import oracle.jdbc.OraclePreparedStatement;
import oracle.jdbc.OracleResultSet;

public class GUI extends javax.swing.JFrame {
    String dayHome, dayMeal, mealTime;
    Connection conn = null;
    OraclePreparedStatement pst = null;
    OracleResultSet rs = null;
    /**
     * Creates new form theGui
     */
    public GUI() {
        initComponents();
        dayHome = "Sunday";
        dayMeal = "Sunday";
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jSpinner1 = new javax.swing.JSpinner();
        buttonGroup1 = new javax.swing.ButtonGroup();
        SearchR1 = new javax.swing.JButton();
        jScrollPane18 = new javax.swing.JScrollPane();
        searchList1 = new javax.swing.JList();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jTextField1 = new javax.swing.JTextField();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSpinner2 = new javax.swing.JSpinner();
        title = new javax.swing.JLabel();
        App = new javax.swing.JTabbedPane();
        home = new javax.swing.JPanel();
        Sunday1 = new javax.swing.JButton();
        Monday1 = new javax.swing.JButton();
        Tuesday1 = new javax.swing.JButton();
        Wednesday1 = new javax.swing.JButton();
        Thursday1 = new javax.swing.JButton();
        Friday1 = new javax.swing.JButton();
        Saturday1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        mealsB = new javax.swing.JList();
        l1 = new javax.swing.JLabel();
        l2 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        mealsL = new javax.swing.JList();
        l3 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        mealsD = new javax.swing.JList();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        InstructionsText = new javax.swing.JTextArea();
        jScrollPane15 = new javax.swing.JScrollPane();
        ingredients = new javax.swing.JList<>();
        jLabel15 = new javax.swing.JLabel();
        fridge = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        curFood = new javax.swing.JList();
        addF = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        removeF = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane23 = new javax.swing.JScrollPane();
        foodlist1 = new javax.swing.JList();
        jScrollPane24 = new javax.swing.JScrollPane();
        foodFacts = new javax.swing.JList();
        shopList = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        foodneeded = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        scrollPane1 = new javax.swing.JScrollPane();
        foodinfo = new javax.swing.JList();
        mealPlan = new javax.swing.JPanel();
        l4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mealsB1 = new javax.swing.JList();
        jScrollPane16 = new javax.swing.JScrollPane();
        mealsL1 = new javax.swing.JList();
        jScrollPane17 = new javax.swing.JScrollPane();
        mealsD1 = new javax.swing.JList();
        jScrollPane7 = new javax.swing.JScrollPane();
        weekList = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        recList = new javax.swing.JList();
        breakfast = new javax.swing.JToggleButton();
        lunch = new javax.swing.JToggleButton();
        dnd = new javax.swing.JToggleButton();
        Sunday = new javax.swing.JToggleButton();
        Monday = new javax.swing.JToggleButton();
        Tuesday = new javax.swing.JToggleButton();
        Thursday = new javax.swing.JToggleButton();
        Wednesday = new javax.swing.JToggleButton();
        Friday = new javax.swing.JToggleButton();
        Saturday = new javax.swing.JToggleButton();
        removeR = new javax.swing.JButton();
        addR = new javax.swing.JButton();
        jScrollPane14 = new javax.swing.JScrollPane();
        searchList = new javax.swing.JList();
        SearchR = new javax.swing.JButton();
        Category = new javax.swing.JRadioButton();
        Ingredients = new javax.swing.JRadioButton();
        createWeekText = new javax.swing.JTextField();
        createWeekB = new javax.swing.JButton();
        setWeekB = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        cookbook = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listCategory = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        Rlist = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        Flist = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        SearchR2 = new javax.swing.JButton();
        jScrollPane19 = new javax.swing.JScrollPane();
        searchList2 = new javax.swing.JList();
        ingredientC = new javax.swing.JRadioButton();
        categoryC = new javax.swing.JRadioButton();
        RemoveIngredient = new javax.swing.JButton();
        AddRecipe = new javax.swing.JButton();
        Rname = new javax.swing.JTextField();
        jScrollPane20 = new javax.swing.JScrollPane();
        Inlist = new javax.swing.JList();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane22 = new javax.swing.JScrollPane();
        Instructions = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        AddIngredient = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));

        SearchR1.setText("Search");

        searchList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane18.setViewportView(searchList1);

        jRadioButton3.setText("ingredients");

        jRadioButton4.setText("Category");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 650));
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        title.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("My Meal Planner");

        App.setMinimumSize(new java.awt.Dimension(675, 575));
        App.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                AppStateChanged(evt);
            }
        });

        Sunday1.setText("Sunday");
        Sunday1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Sunday1ActionPerformed(evt);
            }
        });

        Monday1.setText("Monday");
        Monday1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Monday1ActionPerformed(evt);
            }
        });

        Tuesday1.setText("Tuesday");
        Tuesday1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tuesday1ActionPerformed(evt);
            }
        });

        Wednesday1.setText("Wednesday");
        Wednesday1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Wednesday1ActionPerformed(evt);
            }
        });

        Thursday1.setText("Thursday");
        Thursday1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Thursday1ActionPerformed(evt);
            }
        });

        Friday1.setText("Friday");
        Friday1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Friday1ActionPerformed(evt);
            }
        });

        Saturday1.setText("Saturday");
        Saturday1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Saturday1ActionPerformed(evt);
            }
        });

        mealsB.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        mealsB.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                mealsBValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(mealsB);

        l1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        l1.setText("Breakfast");

        l2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        l2.setText("Lunch");

        mealsL.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        mealsL.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                mealsLValueChanged(evt);
            }
        });
        jScrollPane9.setViewportView(mealsL);

        l3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        l3.setText("Dinner/Dessert");

        mealsD.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        mealsD.setToolTipText("");
        mealsD.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                mealsDValueChanged(evt);
            }
        });
        jScrollPane10.setViewportView(mealsD);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Ingredients");

        InstructionsText.setEditable(false);
        InstructionsText.setColumns(20);
        InstructionsText.setRows(5);
        InstructionsText.setWrapStyleWord(true);
        jScrollPane13.setViewportView(InstructionsText);

        ingredients.setFixedCellWidth(275);
        ingredients.setMaximumSize(new java.awt.Dimension(275, 400));
        ingredients.setMinimumSize(new java.awt.Dimension(275, 400));
        ingredients.setPreferredSize(new java.awt.Dimension(275, 400));
        jScrollPane15.setViewportView(ingredients);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Meal Instructions");

        javax.swing.GroupLayout homeLayout = new javax.swing.GroupLayout(home);
        home.setLayout(homeLayout);
        homeLayout.setHorizontalGroup(
            homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(homeLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(homeLayout.createSequentialGroup()
                                .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Sunday1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Wednesday1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Tuesday1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Monday1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Thursday1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Friday1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Saturday1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(l1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(jScrollPane10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(l2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                                        .addComponent(l3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)))
                                .addGap(40, 40, 40)
                                .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane15)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        homeLayout.setVerticalGroup(
            homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeLayout.createSequentialGroup()
                .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homeLayout.createSequentialGroup()
                        .addContainerGap(75, Short.MAX_VALUE)
                        .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(l1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(homeLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(l2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane15))
                        .addGap(40, 40, 40))
                    .addGroup(homeLayout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(Sunday1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Monday1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Tuesday1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Wednesday1)
                        .addGap(12, 12, 12)
                        .addComponent(Thursday1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Friday1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Saturday1)
                            .addComponent(l3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        App.addTab("Home", home);

        curFood.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        curFood.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        curFood.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                curFoodFocusGained(evt);
            }
        });
        curFood.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                curFoodValueChanged(evt);
            }
        });
        jScrollPane12.setViewportView(curFood);

        addF.setText("Add Food");
        addF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFActionPerformed(evt);
            }
        });

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Fridge");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Nutrition Facts");

        removeF.setText("Remove Food");
        removeF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFActionPerformed(evt);
            }
        });

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Food not in Fridge");
        jLabel14.setToolTipText("");

        foodlist1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        foodlist1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                foodlist1FocusGained(evt);
            }
        });
        foodlist1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                foodlist1ValueChanged(evt);
            }
        });
        jScrollPane23.setViewportView(foodlist1);

        jScrollPane24.setViewportView(foodFacts);

        javax.swing.GroupLayout fridgeLayout = new javax.swing.GroupLayout(fridge);
        fridge.setLayout(fridgeLayout);
        fridgeLayout.setHorizontalGroup(
            fridgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fridgeLayout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(fridgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane23, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                    .addComponent(jScrollPane12)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(fridgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fridgeLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(fridgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane24, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(fridgeLayout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(fridgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(removeF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addF, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(191, Short.MAX_VALUE))
        );
        fridgeLayout.setVerticalGroup(
            fridgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fridgeLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(fridgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fridgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(jScrollPane24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addGroup(fridgeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fridgeLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fridgeLayout.createSequentialGroup()
                        .addComponent(addF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeF)))
                .addGap(70, 70, 70))
        );

        App.addTab("Fridge", fridge);

        foodneeded.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                foodneededValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(foodneeded);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Nutrition Facts");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Shopping List");

        scrollPane1.setViewportView(foodinfo);

        javax.swing.GroupLayout shopListLayout = new javax.swing.GroupLayout(shopList);
        shopList.setLayout(shopListLayout);
        shopListLayout.setHorizontalGroup(
            shopListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shopListLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(shopListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(shopListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        shopListLayout.setVerticalGroup(
            shopListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shopListLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(shopListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(shopListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        App.addTab("Shopping List", shopList);

        l4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        l4.setText("Recipes");

        mealsB1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                mealsB1ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(mealsB1);

        mealsL1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                mealsL1ValueChanged(evt);
            }
        });
        jScrollPane16.setViewportView(mealsL1);

        mealsD1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                mealsD1ValueChanged(evt);
            }
        });
        jScrollPane17.setViewportView(mealsD1);

        weekList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Current week", "previous week 1", "previous week 2", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        weekList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                weekListValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(weekList);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Weekly Plans");

        jScrollPane8.setViewportView(recList);

        breakfast.setText("Breakfast");
        breakfast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                breakfastActionPerformed(evt);
            }
        });

        lunch.setText("Lunch");
        lunch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lunchActionPerformed(evt);
            }
        });

        dnd.setText("Dinner/Dessert");
        dnd.setActionCommand("DinnerDessert");
        dnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dndActionPerformed(evt);
            }
        });

        Sunday.setText("Sunday");
        Sunday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SundayActionPerformed(evt);
            }
        });

        Monday.setText("Monday");
        Monday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MondayActionPerformed(evt);
            }
        });

        Tuesday.setText("Tuesday");
        Tuesday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TuesdayActionPerformed(evt);
            }
        });

        Thursday.setText("Thursday");
        Thursday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThursdayActionPerformed(evt);
            }
        });

        Wednesday.setText("Wednesday");
        Wednesday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WednesdayActionPerformed(evt);
            }
        });

        Friday.setText("Friday");
        Friday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FridayActionPerformed(evt);
            }
        });

        Saturday.setText("Saturday");
        Saturday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaturdayActionPerformed(evt);
            }
        });

        removeR.setText("Remove Recipe");
        removeR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRActionPerformed(evt);
            }
        });

        addR.setText("Add Recipe");
        addR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRActionPerformed(evt);
            }
        });

        jScrollPane14.setViewportView(searchList);

        SearchR.setText("Search");
        SearchR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchRActionPerformed(evt);
            }
        });

        Category.setText("Category");
        Category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryActionPerformed(evt);
            }
        });

        Ingredients.setText("Ingredients");
        Ingredients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IngredientsActionPerformed(evt);
            }
        });

        createWeekB.setText("Create Week Meal Plan");
        createWeekB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createWeekBActionPerformed(evt);
            }
        });

        setWeekB.setText("Set Current Week");
        setWeekB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setWeekBActionPerformed(evt);
            }
        });

        jLabel10.setText("Week Name ");

        javax.swing.GroupLayout mealPlanLayout = new javax.swing.GroupLayout(mealPlan);
        mealPlan.setLayout(mealPlanLayout);
        mealPlanLayout.setHorizontalGroup(
            mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mealPlanLayout.createSequentialGroup()
                .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mealPlanLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(mealPlanLayout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(90, 90, 90))
                            .addGroup(mealPlanLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(l4, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mealPlanLayout.createSequentialGroup()
                                .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mealPlanLayout.createSequentialGroup()
                                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(Wednesday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Sunday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Monday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Tuesday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Thursday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Friday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Saturday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(mealPlanLayout.createSequentialGroup()
                                                .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(breakfast, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                        .addComponent(lunch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                    .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(jScrollPane17, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                        .addComponent(jScrollPane16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                        .addComponent(dnd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)))
                                                .addGap(18, 18, 18)
                                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(mealPlanLayout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(removeR)
                                                .addGap(120, 120, 120)
                                                .addComponent(addR, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(mealPlanLayout.createSequentialGroup()
                                        .addComponent(createWeekText, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(createWeekB, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(mealPlanLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(mealPlanLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(Category)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Ingredients)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mealPlanLayout.createSequentialGroup()
                                .addComponent(setWeekB, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(SearchR)))
                        .addGap(9, 9, 9)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        mealPlanLayout.setVerticalGroup(
            mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mealPlanLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Category)
                        .addComponent(Ingredients))
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SearchR)
                    .addComponent(setWeekB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l4)
                    .addComponent(jLabel4))
                .addGap(19, 19, 19)
                .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mealPlanLayout.createSequentialGroup()
                            .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(breakfast)
                                .addComponent(Sunday))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(mealPlanLayout.createSequentialGroup()
                                    .addComponent(Monday)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Tuesday)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Wednesday)
                                        .addComponent(lunch)))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(mealPlanLayout.createSequentialGroup()
                                    .addComponent(Thursday)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Friday)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Saturday))
                                .addGroup(mealPlanLayout.createSequentialGroup()
                                    .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(dnd)))
                            .addGap(5, 5, 5)
                            .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(8, 8, 8)
                .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addR)
                    .addComponent(removeR))
                .addGap(14, 14, 14)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mealPlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createWeekText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createWeekB))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        App.addTab("Meal Planning", mealPlan);

        listCategory.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(listCategory);

        Rlist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                RlistValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(Rlist);

        Flist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                FlistValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(Flist);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Recipies");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Current Ingredients");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Food");

        SearchR2.setText("Search");
        SearchR2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchR2ActionPerformed(evt);
            }
        });

        jScrollPane19.setViewportView(searchList2);

        ingredientC.setText("Ingredients");
        ingredientC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingredientCActionPerformed(evt);
            }
        });

        categoryC.setText("Category");
        categoryC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryCActionPerformed(evt);
            }
        });

        RemoveIngredient.setText("Remove Ingredient");
        RemoveIngredient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveIngredientActionPerformed(evt);
            }
        });

        AddRecipe.setText("Add Recipe");
        AddRecipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddRecipeActionPerformed(evt);
            }
        });

        Rname.setText("Recipe Name");

        Inlist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                InlistValueChanged(evt);
            }
        });
        jScrollPane20.setViewportView(Inlist);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Category");

        Instructions.setColumns(20);
        Instructions.setRows(5);
        jScrollPane22.setViewportView(Instructions);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Instructions");

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel13.setText("Add a Recipe");

        AddIngredient.setText("Add Ingredient");
        AddIngredient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddIngredientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cookbookLayout = new javax.swing.GroupLayout(cookbook);
        cookbook.setLayout(cookbookLayout);
        cookbookLayout.setHorizontalGroup(
            cookbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cookbookLayout.createSequentialGroup()
                .addGroup(cookbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cookbookLayout.createSequentialGroup()
                        .addGroup(cookbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(cookbookLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cookbookLayout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(cookbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RemoveIngredient)
                                    .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(cookbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane6)))
                    .addGroup(cookbookLayout.createSequentialGroup()
                        .addGap(202, 202, 202)
                        .addGroup(cookbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(SearchR2)
                            .addGroup(cookbookLayout.createSequentialGroup()
                                .addComponent(categoryC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ingredientC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane19, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE))))
                    .addGroup(cookbookLayout.createSequentialGroup()
                        .addGap(419, 419, 419)
                        .addComponent(AddIngredient, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(cookbookLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(Rname, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(cookbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(cookbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane22))
                        .addGap(16, 16, 16)
                        .addComponent(AddRecipe))
                    .addGroup(cookbookLayout.createSequentialGroup()
                        .addGap(267, 267, 267)
                        .addComponent(jLabel13)))
                .addContainerGap())
        );
        cookbookLayout.setVerticalGroup(
            cookbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cookbookLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(cookbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cookbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(categoryC)
                        .addComponent(ingredientC))
                    .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SearchR2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cookbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(9, 9, 9)
                .addGroup(cookbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6)
                    .addComponent(jScrollPane20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cookbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RemoveIngredient)
                    .addComponent(AddIngredient))
                .addGap(16, 16, 16)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cookbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addGroup(cookbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cookbookLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(cookbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Rname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(cookbookLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(AddRecipe)))
                .addGap(0, 78, Short.MAX_VALUE))
        );

        App.addTab("Cookbook", cookbook);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(155, 155, 155))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(294, 294, 294))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(App, javax.swing.GroupLayout.PREFERRED_SIZE, 678, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(title)
                    .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(App, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        App.getAccessibleContext().setAccessibleName("Current meal plan");

        pack();
    }// </editor-fold>//GEN-END:initComponents

//Home Tab
    private void Sunday1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Sunday1ActionPerformed
        // TODO add your handling code here:
        dayHome = "Sunday";
        String[] breakfastList;
        String[] lunchList ;
        String[] dndList;
        int breakLen = countBreak();
        int lunLen = countLunch();
        int dinLen = countDin();
        breakfastList = new String[breakLen];
        lunchList = new String[lunLen];
        dndList = new String[dinLen];
        
        conn = ConnectDB.setupConnection();
        
        try 
        {
            String sqlStatement = "select distinct Recipes.name from Recipes, Meal, DailyPlan, WeekPlan where "
                    + "Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Breakfast' AND WeekPlan.mealID = "
                    + "Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
            rs = (OracleResultSet) pst.executeQuery();
            int i =0;
            while (rs.next())
            {
                String breakfast1 = rs.getString("name");
                breakfastList[i] = breakfast1;
                i++;
                
            }
            mealsB.setListData(breakfastList);
            String sqlStatement2 = "select distinct Recipes.name from Recipes, Meal, "
                    + "DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = "
                    + "'Lunch' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan "
                    + "where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where "
                    + "currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
            rs = (OracleResultSet) pst.executeQuery();
            i = 0;
            while (rs.next())
            {
                lunchList[i] = rs.getString("name");
                i++;
            }
            mealsL.setListData(lunchList);
            String sqlStatement3 = "select distinct Recipes.name from Recipes, Meal, DailyPlan, WeekPlan where"
                    + " Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Dinner' AND WeekPlan.mealID = Meal.id "
                    + "AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayHome+"') AND "
                    + "WeekPlan.weekID = (select id from Week where currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement3);
            rs = (OracleResultSet) pst.executeQuery();
            i = 0;
            while (rs.next())
            {
                String dinner1 = rs.getString("name");
                dndList[i] = dinner1;
                i++;
            }
            mealsD.setListData(dndList);

        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        finally
        {
            ConnectDB.close(rs);
            ConnectDB.close(pst);
            ConnectDB.close(conn);
        }
    }//GEN-LAST:event_Sunday1ActionPerformed

    private void Monday1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Monday1ActionPerformed
        // TODO add your handling code here:
        dayHome = "Monday";
        String[] breakfastList;
        String[] lunchList ;
        String[] dndList;
        int breakLen = countBreak();
        int lunLen = countLunch();
        int dinLen = countDin();
        breakfastList = new String[breakLen];
        lunchList = new String[lunLen];
        dndList = new String[dinLen];
        conn = ConnectDB.setupConnection();
        
        try 
        {
            String sqlStatement = "select distinct Recipes.name from Recipes, Meal, DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Breakfast' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
            rs = (OracleResultSet) pst.executeQuery();
            int i = 0;
            while (rs.next())
            {
                String breakfast1 = rs.getString("name");
                breakfastList[i] = breakfast1;
                i++;
                
            }
            mealsB.setListData(breakfastList);
            String sqlStatement2 = "select distinct Recipes.name from Recipes, Meal, "
                    + "DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = "
                    + "'Lunch' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan "
                    + "where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where "
                    + "currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
            rs = (OracleResultSet) pst.executeQuery();
            i = 0;
            while (rs.next())
            {
                lunchList[0] = rs.getString("name");
                i++;
            }
            mealsL.setListData(lunchList);
            String sqlStatement3 = "select distinct Recipes.name from Recipes, Meal, DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Dinner' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement3);
            rs = (OracleResultSet) pst.executeQuery();
            i = 0;
            while (rs.next())
            {
                String dinner1 = rs.getString("name");
                dndList[i] = dinner1;
                i++;
            }
            mealsD.setListData(dndList);

        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        finally
        {
            ConnectDB.close(rs);
            ConnectDB.close(pst);
            ConnectDB.close(conn);
        }
    }//GEN-LAST:event_Monday1ActionPerformed

    private void Tuesday1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tuesday1ActionPerformed
        // TODO add your handling code here:
        dayHome = "Tuesday";
        String[] breakfastList;
        String[] lunchList ;
        String[] dndList;
        int breakLen = countBreak();
        int lunLen = countLunch();
        int dinLen = countDin();
        breakfastList = new String[breakLen];
        lunchList = new String[lunLen];
        dndList = new String[dinLen];
        
        conn = ConnectDB.setupConnection();
        
        try 
        {
            String sqlStatement = "select distinct Recipes.name from Recipes, Meal, DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Breakfast' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
            rs = (OracleResultSet) pst.executeQuery();
            int i = 0;
            while (rs.next())
            {
                String breakfast1 = rs.getString("name");
                breakfastList[i] = breakfast1;
                i++;
            }
            mealsB.setListData(breakfastList);
            String sqlStatement2 = "select distinct Recipes.name from Recipes, Meal, "
                    + "DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = "
                    + "'Lunch' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan "
                    + "where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where "
                    + "currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
            rs = (OracleResultSet) pst.executeQuery();
            i = 0;
            while (rs.next())
            {
                lunchList[i] = rs.getString("name");
                i++;
            }
            mealsL.setListData(lunchList);
            String sqlStatement3 = "select distinct Recipes.name from Recipes, Meal, DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Dinner' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement3);
            rs = (OracleResultSet) pst.executeQuery();
            i = 0;
            while (rs.next())
            {
                String dinner1 = rs.getString("name");
                dndList[i] = dinner1;
                i++;
            }
            mealsD.setListData(dndList);

        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        finally
        {
            ConnectDB.close(rs);
            ConnectDB.close(pst);
            ConnectDB.close(conn);
        }
    }//GEN-LAST:event_Tuesday1ActionPerformed

    private void Wednesday1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Wednesday1ActionPerformed
        // TODO add your handling code here:
        dayHome = "Wednesday";
        String[] breakfastList;
        String[] lunchList ;
        String[] dndList;
        int breakLen = countBreak();
        int lunLen = countLunch();
        int dinLen = countDin();
        breakfastList = new String[breakLen];
        lunchList = new String[lunLen];
        dndList = new String[dinLen];
        
        conn = ConnectDB.setupConnection();
        
        try 
        {
            String sqlStatement = "select distinct Recipes.name from Recipes, Meal, DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Breakfast' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
            rs = (OracleResultSet) pst.executeQuery();
            int i = 0;
            while (rs.next())
            {
                String breakfast1 = rs.getString("name");
                breakfastList[i] = breakfast1;
                i++;
            }
            mealsB.setListData(breakfastList);
            String sqlStatement2 = "select distinct Recipes.name from Recipes, Meal, "
                    + "DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = "
                    + "'Lunch' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan "
                    + "where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where "
                    + "currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
            rs = (OracleResultSet) pst.executeQuery();
            i = 0;
            while (rs.next())
            {
                lunchList[i] = rs.getString("name");
                i++;
            }
            mealsL.setListData(lunchList);
            String sqlStatement3 = "select distinct Recipes.name from Recipes, Meal, DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Dinner' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement3);
            rs = (OracleResultSet) pst.executeQuery();
            i = 0;
            while (rs.next())
            {
                String dinner1 = rs.getString("name");
                dndList[i] = dinner1;
                i++;
            }
            mealsD.setListData(dndList);

        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        finally
        {
            ConnectDB.close(rs);
            ConnectDB.close(pst);
            ConnectDB.close(conn);
        }
    }//GEN-LAST:event_Wednesday1ActionPerformed

    private void Thursday1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Thursday1ActionPerformed
        // TODO add your handling code here:
        dayHome = "Thursday";
        String[] breakfastList;
        String[] lunchList ;
        String[] dndList;
        int breakLen = countBreak();
        int lunLen = countLunch();
        int dinLen = countDin();
        breakfastList = new String[breakLen];
        lunchList = new String[lunLen];
        dndList = new String[dinLen];
        
        conn = ConnectDB.setupConnection();
        
        try 
        {
            String sqlStatement = "select distinct Recipes.name from Recipes, Meal, DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Breakfast' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
            rs = (OracleResultSet) pst.executeQuery();
            int i = 0;
            while (rs.next())
            {
                String breakfast1 = rs.getString("name");
                breakfastList[i] = breakfast1;
                i++;
            }
            mealsB.setListData(breakfastList);
            String sqlStatement2 = "select distinct Recipes.name from Recipes, Meal, "
                    + "DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = "
                    + "'Lunch' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan "
                    + "where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where "
                    + "currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
            rs = (OracleResultSet) pst.executeQuery();
            i = 0;
            while (rs.next())
            {
                lunchList[i] = rs.getString("name");
                i++;
            }
            mealsL.setListData(lunchList);
            String sqlStatement3 = "select distinct Recipes.name from Recipes, Meal, DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Dinner' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement3);
            rs = (OracleResultSet) pst.executeQuery();
            i = 0;
            while (rs.next())
            {
                String dinner1 = rs.getString("name");
                dndList[i] = dinner1;
                i++;
            }
            mealsD.setListData(dndList);

        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        finally
        {
            ConnectDB.close(rs);
            ConnectDB.close(pst);
            ConnectDB.close(conn);
        }
    }//GEN-LAST:event_Thursday1ActionPerformed

    private void Friday1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Friday1ActionPerformed
        // TODO add your handling code here:
        dayHome = "Friday";
        String[] breakfastList;
        String[] lunchList ;
        String[] dndList;
        int breakLen = countBreak();
        int lunLen = countLunch();
        int dinLen = countDin();
        breakfastList = new String[breakLen];
        lunchList = new String[lunLen];
        dndList = new String[dinLen];
        conn = ConnectDB.setupConnection();
        
        try 
        {
            String sqlStatement = "select distinct Recipes.name from Recipes, Meal, DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Breakfast' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
            rs = (OracleResultSet) pst.executeQuery();
            int i = 0;
            while (rs.next())
            {
                String breakfast1 = rs.getString("name");
                breakfastList[i] = breakfast1;
                i++;
            }
            mealsB.setListData(breakfastList);
            String sqlStatement2 = "select distinct Recipes.name from Recipes, Meal, "
                    + "DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = "
                    + "'Lunch' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan "
                    + "where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where "
                    + "currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
            rs = (OracleResultSet) pst.executeQuery();
            i = 0;
            while (rs.next())
            {
                lunchList[i] = rs.getString("name");
                i++;
            }
            mealsL.setListData(lunchList);
            String sqlStatement3 = "select distinct Recipes.name from Recipes, Meal, DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Dinner' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement3);
            rs = (OracleResultSet) pst.executeQuery();
            i = 0;
            while (rs.next())
            {
                String dinner1 = rs.getString("name");
                dndList[i] = dinner1;
                i++;
            }
            mealsD.setListData(dndList);

        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        finally
        {
            ConnectDB.close(rs);
            ConnectDB.close(pst);
            ConnectDB.close(conn);
        }
    }//GEN-LAST:event_Friday1ActionPerformed

    private void Saturday1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Saturday1ActionPerformed
        // TODO add your handling code here:
        dayHome = "Saturday";
        String[] breakfastList;
        String[] lunchList ;
        String[] dndList;
        int breakLen = countBreak();
        int lunLen = countLunch();
        int dinLen = countDin();
        breakfastList = new String[breakLen];
        lunchList = new String[lunLen];
        dndList = new String[dinLen];
        
        conn = ConnectDB.setupConnection();
        
        try 
        {
            String sqlStatement = "select distinct Recipes.name from Recipes, Meal, DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Breakfast' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
            rs = (OracleResultSet) pst.executeQuery();
            int i = 0;
            while (rs.next())
            {
                String breakfast1 = rs.getString("name");
                breakfastList[i] = breakfast1;
                i++;
            }
            mealsB.setListData(breakfastList);
            String sqlStatement2 = "select distinct Recipes.name from Recipes, Meal, "
                    + "DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = "
                    + "'Lunch' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan "
                    + "where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where "
                    + "currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
            rs = (OracleResultSet) pst.executeQuery();
            i = 0;
            while (rs.next())
            {
                lunchList[i] = rs.getString("name");
                i++;
            }
            mealsL.setListData(lunchList);
            String sqlStatement3 = "select distinct Recipes.name from Recipes, Meal, DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Dinner' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement3);
            rs = (OracleResultSet) pst.executeQuery();
            i = 0;
            while (rs.next())
            {
                String dinner1 = rs.getString("name");
                dndList[i] = dinner1;
                i++;
            }
            mealsD.setListData(dndList);

        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        finally
        {
            ConnectDB.close(rs);
            ConnectDB.close(pst);
            ConnectDB.close(conn);
        }
    }//GEN-LAST:event_Saturday1ActionPerformed

    private void AppStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_AppStateChanged
        
        
        int page = App.getSelectedIndex();
        switch(page){
            case 0: //home
                String[] blank = new String[0];
                ingredients.setListData(blank); 
                InstructionsText.setText("");
                mealsB.setListData(blank);
                mealsL.setListData(blank);
                mealsD.setListData(blank);
                break;
            case 1: //fridge
                inFridge = FoodList.fridgeFood(); 
                curFood.setListData(inFridge.foodListToString());
                notInFridge = FoodList.notInFridgeFood(); 
                foodlist1.setListData(notInFridge.foodListToString());
                
                break;
            case 2: //shopping list
                //compare fridge and recipe ingredients to populate foodneeded
                shoppingListFood = FoodList.shoppingListFood();
                foodneeded.setListData(shoppingListFood.foodListToString());
                break;
            case 3: // meal planning
                //populate weekList
                weekReset();
                break;
            case 4: //cookbook
                
                if(categoryC.isSelected() == true){
                    categoryC.setSelected(false);
                }
                if(ingredientC.isSelected() == true){
                    ingredientC.setSelected(false);
                }
                
                //populate recList
                allRecipe = RecipeList.allAvailableRecipes();
                Rlist.setListData(allRecipe.recipeListToString());
                listCategory.setListData(categories);
                String[] blank1 = new String[0];
                searchList2.setListData(blank1);
                break;    
            default:
                break;
        }
    }//GEN-LAST:event_AppStateChanged
    
    //foodneededValueChanged called when an item is selected in the shopping list
    private void foodneededValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_foodneededValueChanged
        // use the index of the selected food to refer to that food 
        int size =  shoppingListFood.content.size();
        int index = foodneeded.getSelectedIndex();
        if(size >0 && index >= 0 && !evt.getValueIsAdjusting()){
            String[] infoOnCurrentFood = new String[6];
            infoOnCurrentFood[0] = "Food Group: " + shoppingListFood.content.get(index).getFoodGroup();
            infoOnCurrentFood[1] = "Calories: " + shoppingListFood.content.get(index).getCalories();
            infoOnCurrentFood[2] = "Sugar: " + shoppingListFood.content.get(index).getSugar();
            infoOnCurrentFood[3] = "Protein: " + shoppingListFood.content.get(index).getProtein();
            infoOnCurrentFood[4] = "Sodium: " + shoppingListFood.content.get(index).getSodium();
            infoOnCurrentFood[5] = "Fat: " + shoppingListFood.content.get(index).getFat();
            foodinfo.setListData(infoOnCurrentFood);
        }
    }//GEN-LAST:event_foodneededValueChanged

    private void RlistValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_RlistValueChanged
        // TODO add your handling code here:
        if(!evt.getValueIsAdjusting() && Rlist.getSelectedIndex() >= 0){
            int index = Rlist.getSelectedIndex();
            String rName = allRecipe.content.get(index).getName();
            inRecipe = FoodList.getIngredients(rName);
            Inlist.setListData(inRecipe.foodListToString());
            notInRecipe = FoodList.getNotInRecipe(rName);
            Flist.setListData(notInRecipe.foodListToString());
        }
    }//GEN-LAST:event_RlistValueChanged

    private void RemoveIngredientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveIngredientActionPerformed
        // TODO add your handling code here:
        int indexI = Inlist.getSelectedIndex();
        int indexR = Rlist.getSelectedIndex();
        int rID = allRecipe.content.get(indexR).getId();
        String In = inRecipe.content.get(indexI).getName();
        String rName = allRecipe.content.get(indexR).getName();
        
        //remove selected ingredient from recipe
        inRecipe.removeFromRecipe(rID, In);
        
        //update page
        inRecipe = new FoodList();
        inRecipe = FoodList.getIngredients(rName);
        Inlist.setListData(inRecipe.foodListToString());
        notInRecipe = new FoodList();
        notInRecipe = FoodList.getNotInRecipe(rName);
        Flist.setListData(notInRecipe.foodListToString());
    }//GEN-LAST:event_RemoveIngredientActionPerformed

    private void AddRecipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddRecipeActionPerformed
        // TODO add your handling code here:
        String name = Rname.getText();
        String cat = categories[listCategory.getSelectedIndex()];
        String in = Instructions.getText();
        int i = allRecipe.createRecipe(name, cat, in); //new recipe id
        allRecipe = new RecipeList();
        allRecipe = RecipeList.allAvailableRecipes();
        Rlist.setListData(allRecipe.recipeListToString());
        allRecipe = new RecipeList();
        allRecipe = RecipeList.allAvailableRecipes();
        Rlist.setListData(allRecipe.recipeListToString());
        Flist.clearSelection();
        Inlist.clearSelection();
        listCategory.clearSelection();
        Instructions.setText("");
        Rname.setText("Recipe Name");
        
    }//GEN-LAST:event_AddRecipeActionPerformed

    private void InlistValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_InlistValueChanged
        // TODO add your handling code here:
        if(!evt.getValueIsAdjusting() && Rlist.getSelectedIndex() >= 0){
            
        }
    }//GEN-LAST:event_InlistValueChanged

    private void FlistValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_FlistValueChanged
        // TODO add your handling code here:
        if(!evt.getValueIsAdjusting() && Rlist.getSelectedIndex() >= 0){
            
        }
    }//GEN-LAST:event_FlistValueChanged

    private void AddIngredientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddIngredientActionPerformed
        // TODO add your handling code here:
        int indexF = Flist.getSelectedIndex();
        int indexR = Rlist.getSelectedIndex();
        int rID = allRecipe.content.get(indexR).getId();
        String fn = notInRecipe.content.get(indexF).getName();
        String rName = allRecipe.content.get(indexR).getName();
        
        //add selected ingredient from recipe
        inRecipe.addToRecipe(rID, fn);
        
        //update page
        inRecipe = new FoodList();
        inRecipe = FoodList.getIngredients(rName);
        Inlist.setListData(inRecipe.foodListToString());
        notInRecipe = new FoodList();
        notInRecipe = FoodList.getNotInRecipe(rName);
        Flist.setListData(notInRecipe.foodListToString());
        Flist.clearSelection();
        Inlist.clearSelection();
    }//GEN-LAST:event_AddIngredientActionPerformed

    //foodlist1ValueChanged called when a different item is selected that is in the list of food not in the fridge
    private void foodlist1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_foodlist1ValueChanged
        // TODO add your handling code here:
        int size =  inFridge.content.size();
        //using the index of food selected item, fill an array of Strings with information about it
        int index = foodlist1.getSelectedIndex();
        if(size >0 && index >= 0 && !evt.getValueIsAdjusting()){
            String[] infoOnCurrentFood = new String[6];
            infoOnCurrentFood[0] = "Food Group: " + notInFridge.content.get(index).getFoodGroup();
            infoOnCurrentFood[1] = "Calories: " + notInFridge.content.get(index).getCalories();
            infoOnCurrentFood[2] = "Sugar: " + notInFridge.content.get(index).getSugar();
            infoOnCurrentFood[3] = "Protein: " + notInFridge.content.get(index).getProtein();
            infoOnCurrentFood[4] = "Sodium: " + notInFridge.content.get(index).getSodium();
            infoOnCurrentFood[5] = "Fat: " + notInFridge.content.get(index).getFat();
            foodFacts.setListData(infoOnCurrentFood);
        }
    }//GEN-LAST:event_foodlist1ValueChanged

//Fridge page
    /**/
//fridge page
    private void foodlist1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_foodlist1FocusGained
        // TODO add your handling code here:
        curFood.clearSelection();
    }//GEN-LAST:event_foodlist1FocusGained

    //removeFActionPerformed is called when the Add Food button is performed
    private void removeFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFActionPerformed
        // use the index of the selected food to refer to that food
        int index = curFood.getSelectedIndex();
        Food toRemove = inFridge.content.get(index);
        //set the status of the selected tood to 1
        toRemove.toggleInStock(0);
        //reload the fridgeFood and notInFridgelist
        notInFridge = FoodList.notInFridgeFood();
        foodlist1.setListData(notInFridge.foodListToString());
        inFridge = FoodList.fridgeFood();
        curFood.setListData(inFridge.foodListToString());
        String[] blank = new String[0];
        foodFacts.setListData(blank);
    }//GEN-LAST:event_removeFActionPerformed

    //addFActionPerformed is called when the Add Food button is performed
    //it changes the inStock value of the food in the fridge to 1, then reloads both the fridge and not in fridge lists
    private void addFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFActionPerformed
        // use the index of the selected food to refer to that food
        int index = foodlist1.getSelectedIndex();
        Food toAdd = notInFridge.content.get(index);
        //set the status of the selected tood to 1
        toAdd.toggleInStock(1);
        //reload the fridgeFood and notInFridgelist
        inFridge = FoodList.fridgeFood();
        curFood.setListData(inFridge.foodListToString());
        notInFridge = FoodList.notInFridgeFood();
        foodlist1.setListData(notInFridge.foodListToString());
        String[] blank = new String[0];
        foodFacts.setListData(blank);
    }//GEN-LAST:event_addFActionPerformed

    private void curFoodValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_curFoodValueChanged
        int size =  inFridge.content.size();
        //using the index of food selected item, fill an array of Strings with information about it
        int index = curFood.getSelectedIndex();
        if(size >0 && index >= 0 && !evt.getValueIsAdjusting()){
            String[] infoOnCurrentFood = new String[6];
            infoOnCurrentFood[0] = "Food Group: " + inFridge.content.get(index).getFoodGroup();
            infoOnCurrentFood[1] = "Calories: " + inFridge.content.get(index).getCalories();
            infoOnCurrentFood[2] = "Sugar: " + inFridge.content.get(index).getSugar();
            infoOnCurrentFood[3] = "Protein: " + inFridge.content.get(index).getProtein();
            infoOnCurrentFood[4] = "Sodium: " + inFridge.content.get(index).getSodium();
            infoOnCurrentFood[5] = "Fat: " + inFridge.content.get(index).getFat();
            foodFacts.setListData(infoOnCurrentFood);
        }
    }//GEN-LAST:event_curFoodValueChanged

    //curFoodFocusGained clears the selection of the food not in the fridge when an item in the fridge is selected
    private void curFoodFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_curFoodFocusGained
        // TODO add your handling code here:
        foodlist1.clearSelection();
    }//GEN-LAST:event_curFoodFocusGained

    private void SundayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SundayActionPerformed
        // TODO add your handling code here:
        dayMeal = "Sunday";
        Monday.setSelected(false);
        Tuesday.setSelected(false);
        Wednesday.setSelected(false);
        Thursday.setSelected(false);
        Friday.setSelected(false);
        Saturday.setSelected(false);
        breakfastReset();
        lunchReset();
        dinnerReset();  
    }//GEN-LAST:event_SundayActionPerformed

    private void MondayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MondayActionPerformed
        // TODO add your handling code here:
        dayMeal = "Monday";
        mealsB1.clearSelection();
        mealsL1.clearSelection();
        mealsD1.clearSelection();
        Sunday.setSelected(false);
        Tuesday.setSelected(false);
        Wednesday.setSelected(false);
        Thursday.setSelected(false);
        Friday.setSelected(false);
        Saturday.setSelected(false);
        breakfastReset();
        lunchReset();
        dinnerReset();
    }//GEN-LAST:event_MondayActionPerformed

    private void TuesdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TuesdayActionPerformed
        // TODO add your handling code here:
        dayMeal = "Tuesday";
        mealsB1.clearSelection();
        mealsL1.clearSelection();
        mealsD1.clearSelection();
        Sunday.setSelected(false);
        Monday.setSelected(false);
        Wednesday.setSelected(false);
        Thursday.setSelected(false);
        Friday.setSelected(false);
        Saturday.setSelected(false);
        breakfastReset();
        lunchReset();
        dinnerReset();
    }//GEN-LAST:event_TuesdayActionPerformed

    private void WednesdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WednesdayActionPerformed
        // TODO add your handling code here:
        dayMeal = "Wednesday";
        mealsB1.clearSelection();
        mealsL1.clearSelection();
        mealsD1.clearSelection();
        Sunday.setSelected(false);
        Monday.setSelected(false);
        Tuesday.setSelected(false);
        Thursday.setSelected(false);
        Friday.setSelected(false);
        Saturday.setSelected(false);
        breakfastReset();
        lunchReset();
        dinnerReset();
    }//GEN-LAST:event_WednesdayActionPerformed

    private void ThursdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThursdayActionPerformed
        // TODO add your handling code here:
        dayMeal = "Thursday";
        mealsB1.clearSelection();
        mealsL1.clearSelection();
        mealsD1.clearSelection();
        Sunday.setSelected(false);
        Monday.setSelected(false);
        Tuesday.setSelected(false);
        Wednesday.setSelected(false);
        Friday.setSelected(false);
        Saturday.setSelected(false);
        breakfastReset();
        lunchReset();
        dinnerReset();
    }//GEN-LAST:event_ThursdayActionPerformed

    private void FridayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FridayActionPerformed
        // TODO add your handling code here:
        dayMeal = "Friday";
        mealsB1.clearSelection();
        mealsL1.clearSelection();
        mealsD1.clearSelection();
        Sunday.setSelected(false);
        Monday.setSelected(false);
        Tuesday.setSelected(false);
        Wednesday.setSelected(false);
        Thursday.setSelected(false);
        Saturday.setSelected(false);
        breakfastReset();
        lunchReset();
        dinnerReset();
    }//GEN-LAST:event_FridayActionPerformed

    private void SaturdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaturdayActionPerformed
        // TODO add your handling code here:
        dayMeal = "Saturday";
        mealsB1.clearSelection();
        mealsL1.clearSelection();
        mealsD1.clearSelection();
        Sunday.setSelected(false);
        Monday.setSelected(false);
        Tuesday.setSelected(false);
        Wednesday.setSelected(false);
        Thursday.setSelected(false);
        Friday.setSelected(false);
        breakfastReset();
        lunchReset();
        dinnerReset();
    }//GEN-LAST:event_SaturdayActionPerformed

    private void breakfastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breakfastActionPerformed
        // TODO add your handling code here:
        lunch.setSelected(false);
        dnd.setSelected(false);
        mealTime = "Breakfast";
    }//GEN-LAST:event_breakfastActionPerformed

    private void lunchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lunchActionPerformed
        // TODO add your handling code here:
        breakfast.setSelected(false);
        dnd.setSelected(false);
        mealTime = "Lunch";
    }//GEN-LAST:event_lunchActionPerformed

    private void dndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dndActionPerformed
        // TODO add your handling code here:
        lunch.setSelected(false);
        breakfast.setSelected(false);
        mealTime = "Dinner";
    }//GEN-LAST:event_dndActionPerformed

    private void IngredientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IngredientsActionPerformed
        // TODO add your handling code here:
        Category.setSelected(false);
        String[] blank = new String[0];
        searchList.setListData(blank);
        if(Ingredients.isSelected() == true){
            conn = ConnectDB.setupConnection();
            try 
            {
                int totalCat = 0;
                String sqlStatement = "select count(distinct name) as total from Food";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
                rs = (OracleResultSet) pst.executeQuery();
                while (rs.next())
                {
                    totalCat = rs.getInt("total");


                }
                String[] ingredientList = new String[totalCat];

                String sqlStatement2 = "select distinct name from Food";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
                rs = (OracleResultSet) pst.executeQuery();
                int i = 0;
                while (rs.next())
                {
                    ingredientList[i] = rs.getString("name");
                    i++;

                }
                searchList.setListData(ingredientList);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            finally
            {
                ConnectDB.close(rs);
                ConnectDB.close(pst);
                ConnectDB.close(conn);
            }
        } else{
            searchList.setListData(blank);
            recList.setListData(blank);
        }
    }//GEN-LAST:event_IngredientsActionPerformed

    private void CategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoryActionPerformed
        // TODO add your handling code here:
        Ingredients.setSelected(false);
        String[] blank = new String[0];
        searchList.setListData(blank);
        if(Category.isSelected() == true){
            conn = ConnectDB.setupConnection();
            try 
            {
                int totalCat = 0;
                String sqlStatement = "select count(distinct category) as total from Recipes";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
                rs = (OracleResultSet) pst.executeQuery();
                while (rs.next())
                {
                    totalCat = rs.getInt("total");


                }
                String[] categoryList = new String[totalCat];

                String sqlStatement2 = "select distinct category from Recipes";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
                rs = (OracleResultSet) pst.executeQuery();
                int i = 0;
                while (rs.next())
                {
                    categoryList[i] = rs.getString("category");
                    i++;

                }


                searchList.setListData(categoryList);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            finally
            {
                ConnectDB.close(rs);
                ConnectDB.close(pst);
                ConnectDB.close(conn);
            }
        } else{
            searchList.setListData(blank);
            recList.setListData(blank);
        }
    }//GEN-LAST:event_CategoryActionPerformed

    private void SearchRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchRActionPerformed
        // TODO add your handling code here:
        conn = ConnectDB.setupConnection();
        try 
        {
            if(Category.isSelected()){
                int recipeCount = 0;
                String sqlStatement = "select count(distinct id) as total from Recipes where category = '"
                        +searchList.getSelectedValue()+"'";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
                rs = (OracleResultSet) pst.executeQuery();
                while (rs.next())
                {
                    recipeCount = rs.getInt("total");


                }
                String[] recipeList = new String[recipeCount];

                String sqlStatement2 = "select name from Recipes where category = \'"
                        +searchList.getSelectedValue()+"\'";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
                rs = (OracleResultSet) pst.executeQuery();
                int i = 0;
                while (rs.next())
                {
                    recipeList[i] = rs.getString("name");
                    i++;

                }
                recList.setListData(recipeList);
            }
            if (Ingredients.isSelected())
            {
                int recipeCount = 0;
                String sqlStatement = "select count(distinct id) as total from Recipes, RecipeIngredient where "
                        + "id = RecipeIngredient.recipeID AND RecipeIngredient.foodName = '"
                        +searchList.getSelectedValue()+"'";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
                rs = (OracleResultSet) pst.executeQuery();
                while (rs.next())
                {
                    recipeCount = rs.getInt("total");


                }
                String[] recipeList = new String[recipeCount];

                String sqlStatement2 = "select distinct name from Recipes, RecipeIngredient where id = "
                        + "RecipeIngredient.recipeID AND RecipeIngredient.foodName = \'"
                        +searchList.getSelectedValue()+"\'";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
                rs = (OracleResultSet) pst.executeQuery();
                int i = 0;
                while (rs.next())
                {
                    recipeList[i] = rs.getString("name");
                    i++;

                }
                recList.setListData(recipeList);
            }
            
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        finally
        {
            ConnectDB.close(rs);
            ConnectDB.close(pst);
            ConnectDB.close(conn);
        }
    }//GEN-LAST:event_SearchRActionPerformed

    private void mealsBValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_mealsBValueChanged
        // TODO add your handling code here:
        if (mealsB.hasFocus()){
            mealsL.clearSelection();
            mealsD.clearSelection();
            conn = ConnectDB.setupConnection();
        
            try 
            {
                int totalIng = 0;
                String sqlStatement = "select count(distinct Food.name) as total from Food, Recipes, RecipeIngredient where "
                        + "Food.name = RecipeIngredient.foodName AND (select Recipes.id from Recipes where '"
                        +mealsB.getSelectedValue()+"' = Recipes.name) = RecipeIngredient.recipeID";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
                rs = (OracleResultSet) pst.executeQuery();
                while (rs.next())
                {
                    totalIng = rs.getInt("total");

                }
                String[] ingList = new String[totalIng];
                
                String sqlStatement2 = "select distinct Food.name from Food, Recipes, RecipeIngredient where "
                        + "Food.name = RecipeIngredient.foodName AND (select Recipes.id from Recipes where '"
                        +mealsB.getSelectedValue()+"' = Recipes.name) = RecipeIngredient.recipeID";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
                rs = (OracleResultSet) pst.executeQuery();
                int i = 0;
                while (rs.next())
                {
                    ingList[i] = rs.getString("name");
                    i++;

                }
                String sqlStatement3 = "select instructions from Recipes where name = '" + mealsB.getSelectedValue() + "'";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement3);
                rs = (OracleResultSet) pst.executeQuery();
                String instructions = "";
                while (rs.next()){
                    instructions = rs.getString("instructions");
                }
                InstructionsText.setText(instructions);
                ingredients.setListData(ingList);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            finally
            {
                ConnectDB.close(rs);
                ConnectDB.close(pst);
                ConnectDB.close(conn);
            }
        }
    }//GEN-LAST:event_mealsBValueChanged

    private void mealsLValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_mealsLValueChanged
        // TODO add your handling code here:
        if (mealsL.hasFocus()){
            mealsB.clearSelection();
            mealsD.clearSelection();
            conn = ConnectDB.setupConnection();
        
            try 
            {
                int totalIng = 0;
                String sqlStatement = "select count(distinct Food.name) as total from Food, Recipes, RecipeIngredient where "
                        + "Food.name = RecipeIngredient.foodName AND (select Recipes.id from Recipes where '"
                        +mealsL.getSelectedValue()+"' = Recipes.name) = RecipeIngredient.recipeID";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
                rs = (OracleResultSet) pst.executeQuery();
                while (rs.next())
                {
                    totalIng = rs.getInt("total");

                }
                String[] ingList = new String[totalIng];
                
                String sqlStatement2 = "select distinct Food.name from Food, Recipes, RecipeIngredient where "
                        + "Food.name = RecipeIngredient.foodName AND (select Recipes.id from Recipes where '"
                        +mealsL.getSelectedValue()+"' = Recipes.name) = RecipeIngredient.recipeID";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
                rs = (OracleResultSet) pst.executeQuery();
                int i = 0;
                while (rs.next())
                {
                    ingList[i] = rs.getString("name");
                    i++;

                }
                String sqlStatement3 = "select instructions from Recipes where name = '" + mealsL.getSelectedValue() + "'";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement3);
                rs = (OracleResultSet) pst.executeQuery();
                String instructions = "";
                while (rs.next()){
                    instructions = rs.getString("instructions");
                }
                InstructionsText.setText(instructions);
                ingredients.setListData(ingList);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            finally
            {
                ConnectDB.close(rs);
                ConnectDB.close(pst);
                ConnectDB.close(conn);
            }
        }
    }//GEN-LAST:event_mealsLValueChanged

    private void mealsDValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_mealsDValueChanged
        // TODO add your handling code here:
        if(!evt.getValueIsAdjusting()&&mealsD.getSelectedIndex()>=0){

            if (mealsD.hasFocus()){
                mealsL.clearSelection();
                mealsB.clearSelection();
                conn = ConnectDB.setupConnection();

                try 
                {
                    int totalIng = 0;
                    String sqlStatement = "select count(distinct Food.name) as total from Food, Recipes, RecipeIngredient where "
                            + "Food.name = RecipeIngredient.foodName AND (select Recipes.id from Recipes where '"
                            +mealsD.getSelectedValue()+"' = Recipes.name) = RecipeIngredient.recipeID";
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
                    rs = (OracleResultSet) pst.executeQuery();
                    while (rs.next())
                    {
                        totalIng = rs.getInt("total");

                    }
                    String[] ingList = new String[totalIng];

                    String sqlStatement2 = "select distinct Food.name from Food, Recipes, RecipeIngredient where "
                            + "Food.name = RecipeIngredient.foodName AND (select Recipes.id from Recipes where '"
                            +mealsD.getSelectedValue()+"' = Recipes.name) = RecipeIngredient.recipeID";
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
                    rs = (OracleResultSet) pst.executeQuery();
                    int i = 0;
                    while (rs.next())
                    {
                        ingList[i] = rs.getString("name");
                        i++;

                    }

                    String sqlStatement3 = "select instructions from Recipes where name = '" + mealsD.getSelectedValue() + "'";
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement3);
                    rs = (OracleResultSet) pst.executeQuery();
                    String instructions = "";
                    while (rs.next()){
                        instructions = rs.getString("instructions");
                    }
                    InstructionsText.setText(instructions);
                    ingredients.setListData(ingList);
                }
                catch (Exception e)
                {
                    JOptionPane.showMessageDialog(null, e);
                }
                finally
                {
                    ConnectDB.close(rs);
                    ConnectDB.close(pst);
                    ConnectDB.close(conn);
                }
            }
        }
    }//GEN-LAST:event_mealsDValueChanged

    private void addRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRActionPerformed
        // TODO add your handling code here:
        String recAdd = (String)recList.getSelectedValue();
        conn = ConnectDB.setupConnection();
        try 
            {
                //Selects the Recipe ID
                int recID = 0;
                String sqlStatement = "select id from Recipes where name = '"+recAdd+"'";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
                rs = (OracleResultSet) pst.executeQuery();
                while (rs.next())
                {
                    recID = rs.getInt("id");
                }
                // Selects the DP ID
                int dPID = 0;
                String sqlStatement2 = "select id from DailyPlan where weekday = '"+dayMeal+"'";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
                rs = (OracleResultSet) pst.executeQuery();
                while (rs.next())
                {
                    dPID = rs.getInt("id");
                }
                //Counts how many meals are in the DB, in case we need to insert
                int countMeal = 0;
                String sqlStatement3 = "select max(id) as total from Meal";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement3);
                rs = (OracleResultSet) pst.executeQuery();
                while (rs.next())
                {
                    countMeal = rs.getInt("total");
                }
                countMeal++;
                
                int checkRec = 0;
                String sqlStatement4 = "select count(id) as total from Meal where recipeID =  "
                        +recID+" AND dailyPlanID = "+dPID+" AND typeOfMeal = '"+mealTime+"'";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement4);
                rs = (OracleResultSet) pst.executeQuery();
                while (rs.next())
                {
                    checkRec = rs.getInt("total");
                }
                if(checkRec == 1)
                {
                    int mealID = 0;
                    String sqlStatement5 = "select id from Meal where recipeID =  "
                        +recID+" AND dailyPlanID = "+dPID+" AND typeOfMeal = '"+mealTime+"'";
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement5);
                    rs = (OracleResultSet) pst.executeQuery();
                    while(rs.next())
                    {
                        mealID = rs.getInt("id");
                    }
                    int weekID = 0;
                    String sqlStatement7 = "select id from Week where '"+weekList.getSelectedValue()+"'= name";
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement7);
                    rs = (OracleResultSet) pst.executeQuery();
                    while(rs.next())
                    {
                        weekID = rs.getInt("id");
                    }
                    
                    String sqlStatement6 = "insert into WeekPlan values ("+weekID+", "+mealID+")";
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement6);
                    rs = (OracleResultSet) pst.executeQuery();
     
                }
                else{
                    String sqlStatement5 = "insert into Meal values("+recID+", "+dPID+", '"+mealTime+"', "+countMeal+")";
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement5);
                    rs = (OracleResultSet) pst.executeQuery();
                    int weekID = 0;
                    String sqlStatement6 = "select id from Week where '"+weekList.getSelectedValue()+"'= name";
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement6);
                    rs = (OracleResultSet) pst.executeQuery();
                    while(rs.next())
                    {
                        weekID = rs.getInt("id");
                    }
                    String sqlStatement7 = "insert into WeekPlan values ("+weekID+", "+countMeal+")";
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement7);
                    rs = (OracleResultSet) pst.executeQuery();
                }
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            finally
            {
                ConnectDB.close(rs);
                ConnectDB.close(pst);
                ConnectDB.close(conn);
            }
        breakfastReset();
        lunchReset();
        dinnerReset();
    }//GEN-LAST:event_addRActionPerformed

    private void removeRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRActionPerformed
        // TODO add your handling code here:
        conn = ConnectDB.setupConnection();
        try 
            {   //Checks to see if mealsB1 is the selected jList
                if (!mealsB1.isSelectionEmpty())
                {
                    int test = 0;
                    String sqlStatement = "select id from Recipes where '"+mealsB1.getSelectedValue()+"'= name";
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
                    rs = (OracleResultSet) pst.executeQuery();
                    while(rs.next())
                    {
                        test = rs.getInt("id");
                    }
                    
                    int test2 = 0;
                    String sqlStatement2 = "select id from Meal where recipeID = "+test+" AND dailyPlanID = "
                            + "(select id from DailyPlan where weekday = '"+dayMeal+"') AND typeOfMeal = 'Breakfast'";
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
                    rs = (OracleResultSet) pst.executeQuery();
                    while(rs.next())
                    {
                        test2 = rs.getInt("id");
                    }
                    
                    String sqlStatement3 = "Delete from WeekPlan where mealID = "+test2;
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement3);
                    rs = (OracleResultSet) pst.executeQuery();
                }
                if (!mealsL1.isSelectionEmpty())
                {
                    int test = 0;
                    String sqlStatement = "select id from Recipes where '"+mealsL1.getSelectedValue()+"'= name";
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
                    rs = (OracleResultSet) pst.executeQuery();
                    while(rs.next())
                    {
                        test = rs.getInt("id");
                    }
                    
                    int test2 = 0;
                    String sqlStatement2 = "select id from Meal where recipeID = "+test+" AND dailyPlanID = "
                            + "(select id from DailyPlan where weekday = '"+dayMeal+"') AND typeOfMeal = 'Lunch'";
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
                    rs = (OracleResultSet) pst.executeQuery();
                    while(rs.next())
                    {
                        test2 = rs.getInt("id");
                    }
                    
                    String sqlStatement3 = "Delete from WeekPlan where mealID = "+test2;
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement3);
                    rs = (OracleResultSet) pst.executeQuery();
                }
                if (!mealsD1.isSelectionEmpty())
                {
                    int test = 0;
                    String sqlStatement = "select id from Recipes where '"+mealsD1.getSelectedValue()+"'= name";
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
                    rs = (OracleResultSet) pst.executeQuery();
                    while(rs.next())
                    {
                        test = rs.getInt("id");
                    }
                    
                    int test2 = 0;
                    String sqlStatement2 = "select id from Meal where recipeID = "+test+" AND dailyPlanID = "
                            + "(select id from DailyPlan where weekday = '"+dayMeal+"') AND typeOfMeal = 'Dinner'";
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
                    rs = (OracleResultSet) pst.executeQuery();
                    while(rs.next())
                    {
                        test2 = rs.getInt("id");
                    }
                    
                    String sqlStatement3 = "Delete from WeekPlan where mealID = "+test2;
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement3);
                    rs = (OracleResultSet) pst.executeQuery();
                }
                breakfastReset();
                lunchReset();
                dinnerReset();
            }
        catch (Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            finally
            {
                ConnectDB.close(rs);
                ConnectDB.close(pst);
                ConnectDB.close(conn);
            }
    }//GEN-LAST:event_removeRActionPerformed

    private void weekListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_weekListValueChanged
        // TODO add your handling code here:
        Sunday.setSelected(false);
        Monday.setSelected(false);
        Tuesday.setSelected(false);
        Wednesday.setSelected(false);
        Thursday.setSelected(false);
        Friday.setSelected(false);
        Saturday.setSelected(false);
        breakfast.setSelected(false);
        lunch.setSelected(false);
        dnd.setSelected(false);
        String[] emp = new String[0];
        mealsB1.setListData(emp);
        mealsD1.setListData(emp);
        mealsL1.setListData(emp);
    }//GEN-LAST:event_weekListValueChanged

    private void createWeekBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createWeekBActionPerformed
        // TODO add your handling code here:
        String weekName = createWeekText.getText();
        int weekID = 0;
        conn = ConnectDB.setupConnection();
        try 
        { 
            String sqlStatement = "select count(id) as total from Week";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
            rs = (OracleResultSet) pst.executeQuery();
            while(rs.next())
            {
                weekID = rs.getInt("total");
            }
            weekID++;
            String sqlStatement2 = "insert into Week values ("+weekID+", 0, '"+weekName+"')";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
            rs = (OracleResultSet) pst.executeQuery();
                    
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        finally
        {
            ConnectDB.close(rs);
            ConnectDB.close(pst);
            ConnectDB.close(conn);
        }
        weekReset();
    }//GEN-LAST:event_createWeekBActionPerformed

    private void setWeekBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setWeekBActionPerformed
        // TODO add your handling code here:
        conn = ConnectDB.setupConnection();
        try 
        { 
            String sqlStatement = "update Week set currentWeek = 0 where currentWeek = 1";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
            rs = (OracleResultSet) pst.executeQuery();
            
            String sqlStatement2 = "update Week set currentWeek = 1 where name = '"+weekList.getSelectedValue()+"'";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
            rs = (OracleResultSet) pst.executeQuery();
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        finally
        {
            ConnectDB.close(rs);
            ConnectDB.close(pst);
            ConnectDB.close(conn);
        }
    }//GEN-LAST:event_setWeekBActionPerformed

    private void categoryCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryCActionPerformed
        // TODO add your handling code here:
        String[] blank = new String[0];
        Flist.setListData(blank);
        Inlist.setListData(blank);
        Rlist.clearSelection();
        ingredientC.setSelected(false);
        if(categoryC.isSelected() == true){
            conn = ConnectDB.setupConnection();
            try 
            {
                int totalCat = 0;
                String sqlStatement = "select count(distinct category) as total from Recipes";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
                rs = (OracleResultSet) pst.executeQuery();
                while (rs.next())
                {
                    totalCat = rs.getInt("total");


                }
                String[] categoryList = new String[totalCat];

                String sqlStatement2 = "select distinct category from Recipes";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
                rs = (OracleResultSet) pst.executeQuery();
                int i = 0;
                while (rs.next())
                {
                    categoryList[i] = rs.getString("category");
                    i++;

                }


                searchList2.setListData(categoryList);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            finally
            {
                ConnectDB.close(rs);
                ConnectDB.close(pst);
                ConnectDB.close(conn);
            }
        } else{
            allRecipe = RecipeList.allAvailableRecipes();
            Rlist.setListData(allRecipe.recipeListToString());
            searchList2.setListData(blank);
        }
    }//GEN-LAST:event_categoryCActionPerformed

    private void ingredientCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingredientCActionPerformed
        // TODO add your handling code here:
        String[] blank = new String[0];
        Flist.setListData(blank);
        Inlist.setListData(blank);
        Rlist.clearSelection();
        searchList2.setListData(blank);
        categoryC.setSelected(false);
        if(ingredientC.isSelected() == true){
            conn = ConnectDB.setupConnection();
            try 
            {
                int totalCat = 0;
                String sqlStatement = "select count(distinct name) as total from Food";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
                rs = (OracleResultSet) pst.executeQuery();
                while (rs.next())
                {
                    totalCat = rs.getInt("total");


                }
                String[] ingredientList = new String[totalCat];

                String sqlStatement2 = "select distinct name from Food";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
                rs = (OracleResultSet) pst.executeQuery();
                int i = 0;
                while (rs.next())
                {
                    ingredientList[i] = rs.getString("name");
                    i++;

                }
                searchList2.setListData(ingredientList);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            finally
            {
                ConnectDB.close(rs);
                ConnectDB.close(pst);
                ConnectDB.close(conn);
            }
        } else{
            allRecipe = RecipeList.allAvailableRecipes();
            Rlist.setListData(allRecipe.recipeListToString());
            searchList2.setListData(blank);
        }
    }//GEN-LAST:event_ingredientCActionPerformed

    private void SearchR2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchR2ActionPerformed
        // TODO add your handling code here:
        conn = ConnectDB.setupConnection();
        String[] test = new String[0];
        Rlist.setListData(test);
        try 
        {
            if(categoryC.isSelected()){
                int recipeCount = 0;
                String sqlStatement = "select count(distinct id) as total from Recipes where category = '"
                        +searchList2.getSelectedValue()+"'";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
                rs = (OracleResultSet) pst.executeQuery();
                while (rs.next())
                {
                    recipeCount = rs.getInt("total");


                }
                String[] recipeList = new String[recipeCount];

                String sqlStatement2 = "select name from Recipes where category = \'"
                        +searchList2.getSelectedValue()+"\'";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
                rs = (OracleResultSet) pst.executeQuery();
                int i = 0;
                while (rs.next())
                {
                    recipeList[i] = rs.getString("name");
                    i++;

                }
                Rlist.setListData(recipeList);
            }
            if (ingredientC.isSelected())
            {
                int recipeCount = 0;
                String sqlStatement = "select count(distinct id) as total from Recipes, RecipeIngredient where "
                        + "id = RecipeIngredient.recipeID AND RecipeIngredient.foodName = '"
                        +searchList2.getSelectedValue()+"'";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
                rs = (OracleResultSet) pst.executeQuery();
                while (rs.next())
                {
                    recipeCount = rs.getInt("total");


                }
                String[] recipeList = new String[recipeCount];

                String sqlStatement2 = "select distinct name from Recipes, RecipeIngredient where id = "
                        + "RecipeIngredient.recipeID AND RecipeIngredient.foodName = \'"
                        +searchList2.getSelectedValue()+"\'";
                pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
                rs = (OracleResultSet) pst.executeQuery();
                int i = 0;
                while (rs.next())
                {
                    recipeList[i] = rs.getString("name");
                    i++;

                }
                Rlist.setListData(recipeList);
            }
            String[] blank = new String[0];
            searchList2.setListData(blank);
            Flist.setListData(blank);
            Inlist.setListData(blank);
            
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        finally
        {
            ConnectDB.close(rs);
            ConnectDB.close(pst);
            ConnectDB.close(conn);
        }
    }//GEN-LAST:event_SearchR2ActionPerformed

    private void mealsL1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_mealsL1ValueChanged
        // TODO add your handling code here:
        mealsB1.clearSelection();
        mealsD1.clearSelection();
    }//GEN-LAST:event_mealsL1ValueChanged

    private void mealsB1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_mealsB1ValueChanged
        // TODO add your handling code here:
        mealsD1.clearSelection();
        mealsL1.clearSelection();
    }//GEN-LAST:event_mealsB1ValueChanged

    private void mealsD1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_mealsD1ValueChanged
        // TODO add your handling code here:
        mealsB1.clearSelection();
        mealsL1.clearSelection();
    }//GEN-LAST:event_mealsD1ValueChanged

    
    public void breakfastReset()
    {
        String[] breakfastList;
        int breakfastCount = 0;
        conn = ConnectDB.setupConnection();
        
        try 
        {   //Counts the number of Breakfast Sunday meals for selected week
            String sqlStatement4 = "select count(distinct Recipes.name) as total from Recipes, Meal, DailyPlan, WeekPlan where "
                    + "Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Breakfast' AND WeekPlan.mealID = "
                    + "Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayMeal+"') AND "
                    + "WeekPlan.weekID = (select id from Week where Week.name = '"+weekList.getSelectedValue()+"')";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement4);
            rs = (OracleResultSet) pst.executeQuery();
            while (rs.next())
            {
                breakfastCount = rs.getInt("total");
            }
            
            breakfastList = new String[breakfastCount];
            // This finds and inserts the names of recipes for breakfast/Sunday of selected Week
            String sqlStatement = "select distinct Recipes.name from Recipes, Meal, DailyPlan, WeekPlan where "
                    + "Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Breakfast' AND WeekPlan.mealID = "
                    + "Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayMeal+"') AND "
                    + "WeekPlan.weekID = (select id from Week where Week.name = '"+weekList.getSelectedValue()+"')";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
            rs = (OracleResultSet) pst.executeQuery();
            int i = 0;
            while (rs.next())
            {
                breakfastList[i] = rs.getString("name");
                i++;
            }
            mealsB1.setListData(breakfastList);
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        finally
        {
            ConnectDB.close(rs);
            ConnectDB.close(pst);
            ConnectDB.close(conn);
        }
    }
    
    //This resets the lunch jList on the Meal Planning page
    public void lunchReset(){
        String[] lunchList;
        int lunchCount = 0;
        conn = ConnectDB.setupConnection();
        
        try 
        {   
            String sqlStatement5 = "select count(distinct Recipes.name) as total from Recipes, Meal, "
                    + "DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = "
                    + "'Lunch' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan "
                    + "where weekday = '"+dayMeal+"') AND WeekPlan.weekID = "
                    + "(select id from Week where Week.name = '"+weekList.getSelectedValue()+"')";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement5);
            rs = (OracleResultSet) pst.executeQuery();
            while (rs.next())
            {
                lunchCount = rs.getInt("total");
            }
            lunchList = new String[lunchCount];
            
            //Inserts lunch recipes for Sunday
            String sqlStatement2 = "select distinct Recipes.name from Recipes, Meal, "
                    + "DailyPlan, WeekPlan where Meal.recipeID = Recipes.id AND Meal.typeOfMeal = "
                    + "'Lunch' AND WeekPlan.mealID = Meal.id AND Meal.dailyPlanID = (select id from DailyPlan "
                    + "where weekday = '"+dayMeal+"') AND WeekPlan.weekID = "
                    + "(select id from Week where Week.name = '"+weekList.getSelectedValue()+"')";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
            rs = (OracleResultSet) pst.executeQuery();
            int i = 0;
            while (rs.next())
            {
                lunchList[i] = rs.getString("name");
                i++;
            }
            mealsL1.setListData(lunchList);
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        finally
        {
            ConnectDB.close(rs);
            ConnectDB.close(pst);
            ConnectDB.close(conn);
        }
    }
    
    //This resets the dinner jList on the Meal Planning page
    public void dinnerReset()
    {
        String[] dndList;
        int dinnerCount = 0;
        conn = ConnectDB.setupConnection();
        
        try 
        {   
            //Counts the number of recipes for Dinner on Sunday
            String sqlStatement6 = "select count(distinct Recipes.name) as total from Recipes, Meal, DailyPlan, WeekPlan where"
                    + " Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Dinner' AND WeekPlan.mealID = Meal.id "
                    + "AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayMeal+"') AND "
                    + "WeekPlan.weekID = (select id from Week where Week.name = '"+weekList.getSelectedValue()+"')";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement6);
            rs = (OracleResultSet) pst.executeQuery();
            while (rs.next())
            {
                dinnerCount = rs.getInt("total");                
            }
            dndList = new String[dinnerCount];
            
            String sqlStatement3 = "select distinct Recipes.name from Recipes, Meal, DailyPlan, WeekPlan where"
                    + " Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Dinner' AND WeekPlan.mealID = Meal.id "
                    + "AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayMeal+"') AND "
                    + "WeekPlan.weekID = (select id from Week where Week.name = '"+weekList.getSelectedValue()+"')";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement3);
            rs = (OracleResultSet) pst.executeQuery();
            int i = 0;
            while (rs.next())
            {
                String dinner1 = rs.getString("name");
                dndList[i] = dinner1;
                i++;
            }
            mealsD1.setListData(dndList);

        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        finally
        {
            ConnectDB.close(rs);
            ConnectDB.close(pst);
            ConnectDB.close(conn);
        }
    }
    
    public void weekReset()
    {
        conn = ConnectDB.setupConnection();
        
                try 
                {
                    int totalWeek = 0;
                    String sqlStatement = "select count(distinct name) as total from Week";
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
                    rs = (OracleResultSet) pst.executeQuery();
                    while (rs.next())
                    {
                        totalWeek = rs.getInt("total");

                    }
                    String[] weekListList = new String[totalWeek];

                    String sqlStatement2 = "select distinct name from Week";
                    pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement2);
                    rs = (OracleResultSet) pst.executeQuery();
                    int i = 0;
                    while (rs.next())
                    {
                        weekListList[i] = rs.getString("name");
                        i++;

                    }


                    weekList.setListData(weekListList);
                }
                catch (Exception e)
                {
                    JOptionPane.showMessageDialog(null, e);
                }
                finally
                {
                    ConnectDB.close(rs);
                    ConnectDB.close(pst);
                    ConnectDB.close(conn);
                }
    }
    
    public int countBreak()
    {
        int breakLen = 0;
        conn = ConnectDB.setupConnection();
        try{
            
        String sqlStatement = "select count(distinct Recipes.name) as total from Recipes, Meal, DailyPlan, WeekPlan where "
                    + "Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Breakfast' AND WeekPlan.mealID = "
                    + "Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
            rs = (OracleResultSet) pst.executeQuery();
            while (rs.next())
            {
                breakLen = rs.getInt("total");
            }
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        finally
        {
            ConnectDB.close(rs);
            ConnectDB.close(pst);
            ConnectDB.close(conn);
        }
        return breakLen;
    }
    public int countLunch()
    {
        int breakLen = 0;
        conn = ConnectDB.setupConnection();
        try{
            
        String sqlStatement = "select count(distinct Recipes.name) as total from Recipes, Meal, DailyPlan, WeekPlan where "
                    + "Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Lunch' AND WeekPlan.mealID = "
                    + "Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
            rs = (OracleResultSet) pst.executeQuery();
            while (rs.next())
            {
                breakLen = rs.getInt("total");
            }
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        finally
        {
            ConnectDB.close(rs);
            ConnectDB.close(pst);
            ConnectDB.close(conn);
        }
        return breakLen;
    }
    public int countDin()
    {
        int breakLen = 0;
        conn = ConnectDB.setupConnection();
        try{
            
        String sqlStatement = "select count(distinct Recipes.name) as total from Recipes, Meal, DailyPlan, WeekPlan where "
                    + "Meal.recipeID = Recipes.id AND Meal.typeOfMeal = 'Dinner' AND WeekPlan.mealID = "
                    + "Meal.id AND Meal.dailyPlanID = (select id from DailyPlan where weekday = '"+dayHome+"') AND WeekPlan.weekID = (select id from Week where currentWeek = 1)";
            pst = (OraclePreparedStatement) conn.prepareStatement(sqlStatement);
            rs = (OracleResultSet) pst.executeQuery();
            while (rs.next())
            {
                breakLen = rs.getInt("total");
            }
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        finally
        {
            ConnectDB.close(rs);
            ConnectDB.close(pst);
            ConnectDB.close(conn);
        }
        return breakLen;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /*Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    RecipeList allRecipe;
    String[] categories = {"Calzone", "Pizza", "Pasta", "Sandwitch", "Appetizers", "Sides",
                    "Cereal", "Pastry", "Appetizers", "Soups", "Salads", "Desserts",
                    "Breads", "Main Dishes - Beef", "Main Dishes- Pork", "Main Dishes - Seafood"};
    FoodList inFridge, notInFridge, 
            shoppingListFood, inRecipe, notInRecipe, allFood;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddIngredient;
    private javax.swing.JButton AddRecipe;
    private javax.swing.JTabbedPane App;
    private javax.swing.JRadioButton Category;
    private javax.swing.JList Flist;
    private javax.swing.JToggleButton Friday;
    private javax.swing.JButton Friday1;
    private javax.swing.JRadioButton Ingredients;
    private javax.swing.JList Inlist;
    private javax.swing.JTextArea Instructions;
    private javax.swing.JTextArea InstructionsText;
    private javax.swing.JToggleButton Monday;
    private javax.swing.JButton Monday1;
    private javax.swing.JButton RemoveIngredient;
    private javax.swing.JList Rlist;
    private javax.swing.JTextField Rname;
    private javax.swing.JToggleButton Saturday;
    private javax.swing.JButton Saturday1;
    private javax.swing.JButton SearchR;
    private javax.swing.JButton SearchR1;
    private javax.swing.JButton SearchR2;
    private javax.swing.JToggleButton Sunday;
    private javax.swing.JButton Sunday1;
    private javax.swing.JToggleButton Thursday;
    private javax.swing.JButton Thursday1;
    private javax.swing.JToggleButton Tuesday;
    private javax.swing.JButton Tuesday1;
    private javax.swing.JToggleButton Wednesday;
    private javax.swing.JButton Wednesday1;
    private javax.swing.JButton addF;
    private javax.swing.JButton addR;
    private javax.swing.JToggleButton breakfast;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton categoryC;
    private javax.swing.JPanel cookbook;
    private javax.swing.JButton createWeekB;
    private javax.swing.JTextField createWeekText;
    private javax.swing.JList curFood;
    private javax.swing.JToggleButton dnd;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JList foodFacts;
    private javax.swing.JList foodinfo;
    private javax.swing.JList foodlist1;
    private javax.swing.JList foodneeded;
    private javax.swing.JPanel fridge;
    private javax.swing.JPanel home;
    private javax.swing.JRadioButton ingredientC;
    private javax.swing.JList<String> ingredients;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel l1;
    private javax.swing.JLabel l2;
    private javax.swing.JLabel l3;
    private javax.swing.JLabel l4;
    private javax.swing.JList listCategory;
    private javax.swing.JToggleButton lunch;
    private javax.swing.JPanel mealPlan;
    private javax.swing.JList mealsB;
    private javax.swing.JList mealsB1;
    private javax.swing.JList mealsD;
    private javax.swing.JList mealsD1;
    private javax.swing.JList mealsL;
    private javax.swing.JList mealsL1;
    private javax.swing.JList recList;
    private javax.swing.JButton removeF;
    private javax.swing.JButton removeR;
    private javax.swing.JScrollPane scrollPane1;
    private javax.swing.JList searchList;
    private javax.swing.JList searchList1;
    private javax.swing.JList searchList2;
    private javax.swing.JButton setWeekB;
    private javax.swing.JPanel shopList;
    private javax.swing.JLabel title;
    private javax.swing.JList weekList;
    // End of variables declaration//GEN-END:variables
}

